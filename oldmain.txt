// note: github does not save *.dll files

#include "Utils.hpp"
#define WINDOW_TITLE_PREFIX "OpenGL Window"
unsigned framecount = 0;

typedef struct
{
    float XYZW[4];
    float RGBA[4];
} Vertex;

GLuint
VertexShaderId,
FragmentShaderId,
ProgramId,
VaoId,
VboId,
BufferId,
IndexBufferId[2],
ActiveIndexBuffer = 0;

int
CurrentWidth = 600,
CurrentHeight = 600,
WindowHandle = 0;

const GLchar* VertexShader =
{
  "#version 400\n"\

  "layout(location=0) in vec4 in_Position;\n"\
  "layout(location=1) in vec4 in_Color;\n"\
  "out vec4 ex_Color;\n"\

  "void main(void)\n"\
  "{\n"\
  "  gl_Position = in_Position;\n"\
  "  ex_Color = in_Color;\n"\
  "}\n"
};


const GLchar* FragmentShader =
{
  "#version 400\n"\

  "in vec4 ex_Color;\n"\
  "out vec4 out_Color;\n"\

  "void main(void)\n"\
  "{\n"\
  "  out_Color = ex_Color;\n"\
  "}\n"
};


void Initialize(int, char* []);
void InitWindow(int, char* []);
void ResizeFunction(int, int);
void RenderFunction(void);
void TimerFunction(int);
void IdleFunction(void);
void KeyboardFunction(unsigned char, int, int);
void Cleanup(void);
void CreateVBO(void);
void DestroyVBO(void);
void CreateShaders(void);
void DestroyShaders(void);

int main(int argc, char* argv[])
{
    Initialize(argc, argv);

    glutMainLoop();

    exit(EXIT_SUCCESS);
}

void Initialize(int argc, char* argv[])
{
    GLenum GlewInitResult;

    InitWindow(argc, argv);

    GlewInitResult = glewInit();

    if (GLEW_OK != GlewInitResult) {
        std::cout << "ERROR: " << glewGetErrorString(GlewInitResult) << std::endl;
        exit(EXIT_FAILURE);
    }

    std::cout << "INFO: OpenGL Version: " << glGetString(GL_VERSION) << std::endl;

    CreateShaders();
    CreateVBO();
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
}

void InitWindow(int argc, char* argv[])
{
    // initialize glut library(IMPORTANT)
    glutInit(&argc, argv);

    glutInitContextVersion(4, 0);
    glutInitContextFlags(GLUT_FORWARD_COMPATIBLE);
    glutInitContextProfile(GLUT_CORE_PROFILE);

    glutSetOption(
        GLUT_ACTION_ON_WINDOW_CLOSE,
        GLUT_ACTION_GLUTMAINLOOP_RETURNS
    );

    glutInitWindowSize(CurrentWidth, CurrentHeight);

    // GLUT_DEPTH:  enables depth buffer/Z buffer, contains Z values for each pixel drawn to screen
    // GLUT_DOUBLE: enables double-buffering, which uses two buffers(one is drawn on, the other gets displayed) to reduce flickering
    // GLUT_RGBA:   rgba mode, default
    glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);

    WindowHandle = glutCreateWindow(WINDOW_TITLE_PREFIX);

    if (WindowHandle < 1) {
        std::cout << "ERROR: Could not create a new rendering window.\n";
        exit(EXIT_FAILURE);
    }

    glutReshapeFunc(ResizeFunction);
    glutDisplayFunc(RenderFunction);
    glutIdleFunc(IdleFunction);
    glutTimerFunc(0, TimerFunction, 0);
    glutCloseFunc(Cleanup);
    glutKeyboardFunc(KeyboardFunction);
}

void KeyboardFunction(unsigned char Key, int X, int Y)
{
    switch (Key)
    {
    case 'T':
    case 't':
    {
        ActiveIndexBuffer = (ActiveIndexBuffer == 1 ? 0 : 1);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBufferId[ActiveIndexBuffer]);
        break;
    }
    default:
        break;
    }
}

void ResizeFunction(int Width, int Height)
{
    CurrentWidth = Width;
    CurrentHeight = Height;
    glViewport(0, 0, CurrentWidth, CurrentHeight);
}

void RenderFunction(void)
{
    // fps tracker
    ++framecount;

    // clears buffers
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    if (ActiveIndexBuffer == 0) {
        glDrawElements(GL_TRIANGLE_STRIP, 12, GL_UNSIGNED_BYTE, NULL);
    }
    else {
        glDrawElements(GL_TRIANGLE_STRIP, 12, GL_UNSIGNED_BYTE, NULL);
    }

    glutSwapBuffers();
    glutPostRedisplay();
}


void IdleFunction(void)
{
    glutPostRedisplay();
}

void TimerFunction(int Value)
{
    if (0 != Value) {
        char *TempString = new char[512];

        sprintf(
            TempString,
            "%s: %d Frames Per Second @ %d x %d",
            WINDOW_TITLE_PREFIX,
            framecount * 4,
            CurrentWidth,
            CurrentHeight
        );

        glutSetWindowTitle(TempString);
        delete[] TempString;
    }

    framecount = 0;
    glutTimerFunc(250, TimerFunction, 1);
}

void Cleanup(void)
{
    DestroyShaders();
    DestroyVBO();
}

void CreateVBO(void)
{
    //Vertex Vertices[] =
    //{
    //    { { 0.0f, 0.0f, 0.0f, 1.0f }, { 1.0f, 1.0f, 1.0f, 1.0f } },
    //    // Top
    //    { { -0.2f, 0.8f, 0.0f, 1.0f }, { 0.0f, 1.0f, 0.0f, 1.0f } },
    //    { { 0.2f, 0.8f, 0.0f, 1.0f }, { 0.0f, 0.0f, 1.0f, 1.0f } },
    //    { { 0.0f, 0.8f, 0.0f, 1.0f }, { 0.0f, 1.0f, 1.0f, 1.0f } },
    //    { { 0.0f, 1.0f, 0.0f, 1.0f }, { 1.0f, 0.0f, 0.0f, 1.0f } },
    //    // Bottom
    //    { { -0.2f, -0.8f, 0.0f, 1.0f }, { 0.0f, 0.0f, 1.0f, 1.0f } },
    //    { { 0.2f, -0.8f, 0.0f, 1.0f }, { 0.0f, 1.0f, 0.0f, 1.0f } },
    //    { { 0.0f, -0.8f, 0.0f, 1.0f }, { 0.0f, 1.0f, 1.0f, 1.0f } },
    //    { { 0.0f, -1.0f, 0.0f, 1.0f }, { 1.0f, 0.0f, 0.0f, 1.0f } },
    //    // Left
    //    { { -0.8f, -0.2f, 0.0f, 1.0f }, { 0.0f, 1.0f, 0.0f, 1.0f } },
    //    { { -0.8f, 0.2f, 0.0f, 1.0f }, { 0.0f, 0.0f, 1.0f, 1.0f } },
    //    { { -0.8f, 0.0f, 0.0f, 1.0f }, { 0.0f, 1.0f, 1.0f, 1.0f } },
    //    { { -1.0f, 0.0f, 0.0f, 1.0f }, { 1.0f, 0.0f, 0.0f, 1.0f } },
    //    // Right
    //    { { 0.8f, -0.2f, 0.0f, 1.0f }, { 0.0f, 0.0f, 1.0f, 1.0f } },
    //    { { 0.8f, 0.2f, 0.0f, 1.0f }, { 0.0f, 1.0f, 0.0f, 1.0f } },
    //    { { 0.8f, 0.0f, 0.0f, 1.0f }, { 0.0f, 1.0f, 1.0f, 1.0f } },
    //    { { 1.0f, 0.0f, 0.0f, 1.0f }, { 1.0f, 0.0f, 0.0f, 1.0f } }
    //};

    Vertex Vertices[] = {
        // Front Face
        { { -0.2f, 0.2f, 0.2f, 1.0f  }, { 1.0f, 1.0f, 0.0f, 1.0f } },
        { { 0.2f, 0.2f, 0.2f, 1.0f  }, { 1.0f, 1.0f, 0.0f, 1.0f } },
        { { -0.2f, -0.2f, 0.2f, 1.0f }, { 1.0f, 1.0f, 0.0f, 1.0f } },
        { { 0.2f, -0.2f, 0.2f, 1.0f  }, { 1.0f, 1.0f, 0.0f, 1.0f } },
        // Back Face
        { { 0.0f, 0.4f, -0.2f, 1.0f  }, { 0.0f, 1.0f, 1.0f, 1.0f } },
        { { 0.4f, 0.4f, -0.2f, 1.0f  }, { 0.0f, 1.0f, 1.0f, 1.0f } },
        { { 0.0f, 0.0f, -0.2f, 1.0f }, { 0.0f, 1.0f, 1.0f, 1.0f } },
        { { 0.4f, 0.0f, -0.2f, 1.0f  }, { 0.0f, 1.0f, 1.0f, 1.0f } }
    };

    //GLubyte Indices[] = {
    //    // Top
    //    0, 1, 3,
    //    0, 3, 2,
    //    3, 1, 4,
    //    3, 4, 2,
    //    // Bottom
    //    0, 5, 7,
    //    0, 7, 6,
    //    7, 5, 8,
    //    7, 8, 6,
    //    // Left
    //    0, 9, 11,
    //    0, 11, 10,
    //    11, 9, 12,
    //    11, 12, 10,
    //    // Right
    //    0, 13, 15,
    //    0, 15, 14,
    //    15, 13, 16,
    //    15, 16, 14
    //};

    GLubyte Indices[] = {
        // Front
        0, 1, 2,
        1, 2, 3,
        // Back
        4, 5, 6,
        5, 6, 7
    };

    //GLubyte AlternateIndices[] = {
    //    // Outer square border:
    //    3, 4, 16,
    //    3, 15, 16,
    //    15, 16, 8,
    //    15, 7, 8,
    //    7, 8, 12,
    //    7, 11, 12,
    //    11, 12, 4,
    //    11, 3, 4,

    //    // Inner square
    //    0, 11, 3,
    //    0, 3, 15,
    //    0, 15, 7,
    //    0, 7, 11
    //};

    GLubyte AlternateIndices[] = {
        // Top
        4, 5, 0,
        5, 0, 1,
        // Bottom
        6, 7, 2,
        7, 2, 3
    };

    GLenum ErrorCheckValue = glGetError();
    const size_t BufferSize = sizeof(Vertices);
    const size_t VertexSize = sizeof(Vertices[0]);
    const size_t RgbOffset = sizeof(Vertices[0].XYZW);

    glGenBuffers(1, &VboId);

    glGenVertexArrays(1, &VaoId);
    glBindVertexArray(VaoId);

    glBindBuffer(GL_ARRAY_BUFFER, VboId);
    glBufferData(GL_ARRAY_BUFFER, BufferSize, Vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, VertexSize, 0);
    glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, VertexSize, (GLvoid*)RgbOffset);

    glEnableVertexAttribArray(0);
    glEnableVertexAttribArray(1);

    glGenBuffers(2, IndexBufferId);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBufferId[0]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(Indices), Indices, GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBufferId[1]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(AlternateIndices), AlternateIndices, GL_STATIC_DRAW);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBufferId[0]);

    ErrorCheckValue = glGetError();
    if (ErrorCheckValue != GL_NO_ERROR)
    {
        fprintf(
            stderr,
            "ERROR: Could not create a VBO: %s\n",
            gluErrorString(ErrorCheckValue)
        );

        exit(-1);
    }
}

void DestroyVBO(void)
{
    GLenum ErrorCheckValue = glGetError();

    glDisableVertexAttribArray(1);
    glDisableVertexAttribArray(0);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glDeleteBuffers(1, &VboId);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
    glDeleteBuffers(2, IndexBufferId);

    glBindVertexArray(0);
    glDeleteVertexArrays(1, &VaoId);

    ErrorCheckValue = glGetError();
    if (ErrorCheckValue != GL_NO_ERROR)
    {
        fprintf(
            stderr,
            "ERROR: Could not destroy the VBO: %s \n",
            gluErrorString(ErrorCheckValue)
        );

        exit(-1);
    }
}

void CreateShaders(void)
{
    GLenum ErrorCheckValue = glGetError();

    VertexShaderId = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(VertexShaderId, 1, &VertexShader, NULL);
    glCompileShader(VertexShaderId);

    FragmentShaderId = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(FragmentShaderId, 1, &FragmentShader, NULL);
    glCompileShader(FragmentShaderId);

    ProgramId = glCreateProgram();
    glAttachShader(ProgramId, VertexShaderId);
    glAttachShader(ProgramId, FragmentShaderId);
    glLinkProgram(ProgramId);
    glUseProgram(ProgramId);

    ErrorCheckValue = glGetError();
    if (ErrorCheckValue != GL_NO_ERROR)
    {
        fprintf(
            stderr,
            "ERROR: Could not create the shaders: %s \n",
            gluErrorString(ErrorCheckValue)
        );

        exit(-1);
    }
}

void DestroyShaders(void)
{
    GLenum ErrorCheckValue = glGetError();

    glUseProgram(0);

    glDetachShader(ProgramId, VertexShaderId);
    glDetachShader(ProgramId, FragmentShaderId);

    glDeleteShader(FragmentShaderId);
    glDeleteShader(VertexShaderId);

    glDeleteProgram(ProgramId);

    ErrorCheckValue = glGetError();
    if (ErrorCheckValue != GL_NO_ERROR)
    {
        fprintf(
            stderr,
            "ERROR: Could not destroy the shaders: %s \n",
            gluErrorString(ErrorCheckValue)
        );

        exit(-1);
    }
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
